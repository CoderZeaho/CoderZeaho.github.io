<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xpher | 一个努力成长的程序员</title>
    <description>一个努力成长的程序员</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 01 Dec 2019 17:42:15 +0800</pubDate>
    <lastBuildDate>Sun, 01 Dec 2019 17:42:15 +0800</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>通用链接（Universal Links）实现通过 App 分享的链接跳回 App</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;QQ互联将于2019年12月1日进行Universal Links校验，请开发者及时更新适配。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://wiki.connect.qq.com/qq互联将于2019年12月1日进行universal-links校验，请开发者及时更&quot;&gt;https://wiki.connect.qq.com/qq互联将于2019年12月1日进行universal-links校验，请开发者及时更&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1712780-aceb0e8284347eb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图1 QQ互联 wiki&quot; /&gt;&lt;/p&gt;

&lt;p&gt;官方说明：
当支持通用链接时，用户可以点击网站链接重定向到已安装的应用（无需通过Safari浏览器），如果未安装应用则打开该网站链接。&lt;/p&gt;

&lt;h3 id=&quot;配置前准备&quot;&gt;配置前准备：&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;配置前提：域名需要支持 HTTPS 连接&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;开始配置&quot;&gt;开始配置：&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;打开 &lt;a href=&quot;https://developer.apple.com&quot;&gt;https://developer.apple.com&lt;/a&gt;，登录苹果开发者账号，开启要配置的&lt;code class=&quot;highlighter-rouge&quot;&gt;APP IDs&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;Associated Domains&lt;/code&gt;服务 &lt;strong&gt;（开启服务后需要重新激活失效的Provisioning Profiles，并重新下载安装）&lt;/strong&gt;。
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1712780-6e6f462b941c0209.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图2 苹果开发者官网-Certificates, Identifiers &amp;amp; Profiles-Identifiers-开启服务&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2.项目配置支持通用链接的域名（支持添加多个域名）
格式：applinks:xxx.xxx.xx，例如：applinks:d.vibesix.cn。
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1712780-1d34f842ecdae83b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图3 Capabilities-Associated Domains-添加需要支持的域名&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.需要服务器支持，确认通用链接对应的App的身份，创建一个命名为&lt;code class=&quot;highlighter-rouge&quot;&gt;apple-app-site-association&lt;/code&gt;文件（没有后缀名），并写入一下&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt;格式数据，如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;applinks&quot;: {
        &quot;apps&quot;: [],
        &quot;details&quot;: [
            {
                &quot;appID&quot;: &quot;&amp;lt;App ID Prefix&amp;gt;.&amp;lt;Bundle ID&amp;gt;&quot;,
                &quot;paths&quot;: [ &quot;/open-app.html/*&quot;]
            }
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后将&lt;code class=&quot;highlighter-rouge&quot;&gt;apple-app-site-association&lt;/code&gt;文件拷贝到该域名服务器的&lt;code class=&quot;highlighter-rouge&quot;&gt;.well-known&lt;/code&gt;文件夹下面。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ps:&lt;code class=&quot;highlighter-rouge&quot;&gt;App ID Prefix&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle ID&lt;/code&gt;可在&lt;code class=&quot;highlighter-rouge&quot;&gt;图1&lt;/code&gt;蓝框部分获取到，&lt;code class=&quot;highlighter-rouge&quot;&gt;paths&lt;/code&gt;是通用链接域名后面的路径，*代表任意路径&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;4.测试通用链接是否生效，进入&lt;a href=&quot;https://search.developer.apple.com/appsearch-validation-tool&quot;&gt;https://search.developer.apple.com/appsearch-validation-tool&lt;/a&gt;
进行验证。
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1712780-1de86141da9bfaad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图4 验证通用链接是否生效&quot; /&gt;
然而我试过n+1次，无法验证成功，并报错：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Could not extract required information for application links. Learn how to implement the recommended Universal Links.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Error no apps associated with url&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;果断放弃验证（后来发现这个过程可以忽略），然后试了网上的方法将通用链接粘贴到手机&lt;code class=&quot;highlighter-rouge&quot;&gt;备忘录&lt;/code&gt;上，点击链接即可跳转到 App 里，如图：&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1712780-0634046aefda436f.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;图5 备忘录验证通用链接是否生效&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.进入应用，定位到指定功能模块。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity restorationHandler:(void (^)(NSArray&amp;lt;id&amp;lt;UIUserActivityRestoring&amp;gt;&amp;gt; * _Nullable))restorationHandler {
    if ([[userActivity activityType] isEqualToString:NSUserActivityTypeBrowsingWeb]) {
        NSString *host = userActivity.webpageURL.host;
        if ([host isEqualToString:@&quot;d.vibesix.cn&quot;]) {
                // 跳转操作
        }
    }
    return YES;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;实现效果&quot;&gt;实现效果：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1712780-9c955fc36bad853b.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;图6 手机安装通用链接指向的应用时&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1712780-9400841bab7159cd.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;图7 手机没有安装通用链接指向的应用时&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;参考链接&quot;&gt;参考链接：&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/AppSearch/UniversalLinks.html&quot;&gt;Apple-Support Universal Links&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/8e8840dcd54d&quot;&gt;ios通用链接 UniversalLink在微信打开app&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://yohunl.com/ios-universal-links-tong-yong-lian-jie/&quot;&gt;iOS Universal Links(通用链接)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/8ae3576b12b0&quot;&gt;iOS 通用链接（UniversalLinks）+ 分享功能的一些看法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/848158b70a57&quot;&gt;通用链接(Universal Links)实践笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 25 Sep 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/09/25/%E9%80%9A%E7%94%A8%E9%93%BE%E6%8E%A5-Universal-Links-%E5%AE%9E%E7%8E%B0%E9%80%9A%E8%BF%87-App-%E5%88%86%E4%BA%AB%E7%9A%84%E9%93%BE%E6%8E%A5%E8%B7%B3%E5%9B%9E-App.html</link>
        <guid isPermaLink="true">http://localhost:4000/2019/09/25/%E9%80%9A%E7%94%A8%E9%93%BE%E6%8E%A5-Universal-Links-%E5%AE%9E%E7%8E%B0%E9%80%9A%E8%BF%87-App-%E5%88%86%E4%BA%AB%E7%9A%84%E9%93%BE%E6%8E%A5%E8%B7%B3%E5%9B%9E-App.html</guid>
        
        <category>iOS</category>
        
        
        <category>Plugins</category>
        
      </item>
    
      <item>
        <title>Sublime Text插件安装方法</title>
        <description>&lt;h4 id=&quot;1通过-package-control-进行在线安装&quot;&gt;1.通过 Package Control 进行在线安装&lt;/h4&gt;
&lt;p&gt;说在前面:Package Control 是一个用来进行在线安装插件的工具，在安装插件前需要先安装 Package Control。&lt;/p&gt;

&lt;h6 id=&quot;安装-package-control&quot;&gt;安装 Package Control&lt;/h6&gt;
&lt;p&gt;安装方法：通过快捷键 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + `&lt;/code&gt;打开  Console，在最底部把下面的代码复制粘贴过去后回车，然后稍微等待一段时间。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果未能安装，或者报错可能是版本更新导致失效，此时可以进入官网复制粘贴官网提供代码。&lt;a href=&quot;https://packagecontrol.io/installation#st3&quot;&gt;传送门&lt;/a&gt;
安装成功后重启Sublime Text即可。&lt;/p&gt;
&lt;h6 id=&quot;通过-package-control-安装-sublime-插件&quot;&gt;通过 Package Control 安装 Sublime 插件&lt;/h6&gt;
&lt;p&gt;使用方法：使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + Shift + P &lt;/code&gt; 调出面板，然后输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;pci&lt;/code&gt; ，选中  &lt;code class=&quot;highlighter-rouge&quot;&gt;Package Control: Install Package&lt;/code&gt;，然后通过输入插件的名字找到插件并回车安装即可。&lt;/p&gt;

</description>
        <pubDate>Sat, 09 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/12/09/Sublime-Text%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/09/Sublime-Text%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95.html</guid>
        
        <category>Plugins</category>
        
        
        <category>Plugins</category>
        
      </item>
    
      <item>
        <title>关于闭包的几种写法</title>
        <description>&lt;h1 id=&quot;闭包&quot;&gt;闭包&lt;/h1&gt;
&lt;p&gt;闭包是一个特殊的函数,经常用于回调&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//  定义闭包
类型 : (形参) -&amp;gt; (返回值)

//  闭包执行回调
类型(值)

//  闭包实现回调
{
    (形参) -&amp;gt; (返回值) in
    //  执行代码
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;简单举个例子:在方法中定义闭包实现回调传值&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;File:WJKHttpTool.swift

import Foundation

class WJKHttpTool : NSObject {
     //  MARK:定义闭包
     func loadData(completion : (_ result : Bool) -&amp;gt; ()) -&amp;gt; () {
        //  MARK:闭包执行回调
        completion(true)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;File:WJKViewController.swift

import UIKit

class ViewController : UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
        
        let httpTool : WJKHttpTool = WJKHttpTool()
        
        //  MARK:闭包实现回调
         httpTool.loadData (completion: { (result) -&amp;gt; () in
             print(result)
        })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;尾随闭包:
1.如果闭包是函数的最后一个参数,则可以将闭包写在()后面
2.如果函数只有一个参数,并且这个参数是闭包,那么()可以不写&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;上述闭包则为尾随闭包则可以写成
httpTool.loadData() { (result) -&amp;gt; () in
    print(result)
}

当然开发中建议(包括代码中敲回车代码补全)写成
httpTool.loadData { (result) -&amp;gt; () in
    print(result)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;扩展&quot;&gt;扩展&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;如果闭包没有参数,没有返回值部分内容可以省略&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;如上述例子中没有返回值则可以写成
httpTool.loadData (completion: { (result) in
    print(result)
})

当然如果是尾随闭包则可以写成
httpTool.loadData { (result) in
    print(result)
}
//  所以上述写法就是最简写法(官方推荐写法)了
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;解决循环引用&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;httpTool.loadData {[weak self] (result) in
    print(result)
    self?.view.backgroundColor = UIColor.white
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sun, 26 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/11/26/%E5%85%B3%E4%BA%8E%E9%97%AD%E5%8C%85%E7%9A%84%E5%87%A0%E7%A7%8D%E5%86%99%E6%B3%95.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/11/26/%E5%85%B3%E4%BA%8E%E9%97%AD%E5%8C%85%E7%9A%84%E5%87%A0%E7%A7%8D%E5%86%99%E6%B3%95.html</guid>
        
        <category>Swift</category>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>Swift 2.0 到 Swift 3.0</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;问: 报错:The “Swift Language Version” (SWIFT_VERSION) build setting must be set to a supported value for targets which use Swift. This setting can be set in the build settings editor.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;解决办法:&lt;code class=&quot;highlighter-rouge&quot;&gt;TARGETS &amp;gt; Build Settings &amp;gt; Swift Language Version&lt;/code&gt;,如图设置成3.2及更高版本:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1712780-8510c6afb1368f08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Swift Language Version&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;问:当应用程序运行起来,闪过启动页后便成了黑屏&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;创建工程后,AppDelegate中自动生成应用开始运行时会调用的方法&lt;/p&gt;

&lt;h5 id=&quot;swift-20-如下&quot;&gt;Swift 2.0 如下:&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&amp;gt; Bool {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在Swift 3.0 中该方法发生变化,工程中会报出警告,如图:&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1712780-0f5a6547cf928173.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;warning&quot; /&gt;然而修复警告后仍然不走此方法内部,Swift 3.0 创建工程后,AppDelegate中应用开始运行时调用的方法发生变化&lt;/p&gt;

&lt;h5 id=&quot;swift-30-如下&quot;&gt;Swift 3.0 如下:&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey : Any]? = nil) -&amp;gt; Bool {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Swift 3.0 中应使用上述方法替换 Swift 2.0 中的方法&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PS:持续更新......&lt;/code&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 24 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/11/24/Swift-2.0-%E5%88%B0-Swift-3.0.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/11/24/Swift-2.0-%E5%88%B0-Swift-3.0.html</guid>
        
        <category>Swift</category>
        
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>各种数据类型的空值判断方法</title>
        <description>&lt;p&gt;在开发中,请求数据会遇到返回为空的情况,比如得到&lt;null&gt;的情况,我们需要判断是否为空,不为空才封装数据模型,为空则直接返回&lt;/null&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; id result;
//遇到返回&amp;lt;null&amp;gt;的情况
 if ([result isEqual:[NSNull null]]) {
     return;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;对于对象类型的数据进行空值判断&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//可以使用 !(非) 来判断
if（!object） return;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;对于类似于NSString类型的数据进行空值判断&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSString *string;
string == nil;
//or 
[string isEqualToString:@&quot;&quot;];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;对于类似于NSNumber类型的数据进行空值判断&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSNumber *number;
number == nil;
//or
[number isEqualToNumber:@0];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;对于类似于NSArray类型的数据进行空值判断&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSArray *array;
array == nil;
//or
[array count] = 0;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;对于类似于NSDictionary类型的数据进行空值判断&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSDictionary *dictionary;
[dictionary isEqual:[NSNull null]];
//or
[dictionary count] = 0;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sat, 05 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/11/05/%E5%90%84%E7%A7%8D%E7%A9%BA%E5%80%BC%E5%88%A4%E6%96%AD.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/11/05/%E5%90%84%E7%A7%8D%E7%A9%BA%E5%80%BC%E5%88%A4%E6%96%AD.html</guid>
        
        <category>Objective-C</category>
        
        
        <category>Objective-C</category>
        
      </item>
    
      <item>
        <title>NSDate与时间戳互相转换</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;NSString日期转换为时间戳：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//如格式为:### xxxx-xx-xx xx:xx:xx ### 我们应该怎样把NSString日期转换为时间戳呢
NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
[formatter setDateFormat:@&quot;yyyy-MM-dd HH:mm:ss&quot;];
NSDate *date = [formatter dateFromString:dateString];
NSTimeInterval interval = [date timeIntervalSince1970];
NSString *timeStamp = [NSString stringWithFormat:@&quot;%i&quot;, (int)interval];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果开发过程中后端返回上述格式的字符串,为NSString写个Category,方便初始化model,如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@implementation NSString (NSDate)
- (NSDate *)dateWithFormat:(NSString *)format;{
    NSDateFormatter *formatter = [NSDateFormatter new];
    formatter.dateFormat = format;
    
    return [formatter dateFromString:self];
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;self.field_name = [[[infoDict formateObjectForKey:@&quot;field_name&quot;] dateWithFormat:@&quot;yyyy-MM-dd HH:mm:ss&quot;] timeIntervalSince1970];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;NSString时间戳转换为NSDate:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
[formatter setDateFormat:@&quot;yyyy年MM月dd日 HH时mm分ss秒&quot;];
NSString *str = [NSString stringWithFormat:@&quot;%@&quot;,
[formatter stringFromDate:[NSDate dateWithTimeIntervalSince1970:[timeStamp integerValue]]]];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Thu, 22 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/09/22/NSDate%E4%B8%8E%E6%97%B6%E9%97%B4%E6%88%B3%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/09/22/NSDate%E4%B8%8E%E6%97%B6%E9%97%B4%E6%88%B3%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2.html</guid>
        
        <category>Objective-C</category>
        
        
        <category>Objective-C</category>
        
      </item>
    
      <item>
        <title>MAC下配置ZSH</title>
        <description>&lt;p&gt;Shell是Linux/Unix的一个外壳。它负责外界与Linux内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序。&lt;/p&gt;

&lt;p&gt;MAC下面的终端是神器，在实际开发中为开发者带来许多方便，而程序员看到不爽的Shell，就会自己重新写一套，慢慢形成了一些标准，常用的Shell有这么几种，sh、bash、csh等。&lt;/p&gt;

&lt;p&gt;在 Linux 里执行这个命令和 MAC 略有不同，你会发现 Mac 多了一个 ZSH，也就是说 OS X 系统预装了个 ZSH，可惜的事ZSH不是很好用，需要配合一些插件和模板：oh-my-zsh&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1712780-0d009c638e8b94eb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;ZSH配合oh-my-zsh使用效果图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;来吧，让我们一起来配置一下吧&lt;/p&gt;

&lt;p&gt;1.打开终端，输入命令行，将bash切换为zsh&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chsh -s /bin/zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;直接用zsh会很蛋疼，因为zsh功能很强大但是太复杂，所以需要oh-my-zsh来将它简单化。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2.输入命令行，下载oh-my-zsh&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//1)直接用git从github上面下载包
git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//2) 备份已有的zshrc
cp ~/.zshrc ~/.zshrc.orig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//3)替换zshrc
cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;3.重启终端，大功告成，就是这么简单&lt;/p&gt;

&lt;p&gt;按照步骤安装完后，可以配置一些常用的命令的“别名”
在根目录下输入以下命令&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi .zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;翻到最下面，输入”i”，vim编辑器插入状态，可以为常用命令起别名，例如：alias gs=’git status’，插入后”ESC”，输入”:wq”(双引号不敲 –”)，退出vim编辑器，重启终端或者输入以下命令立即生效&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source .zshrc.local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1712780-9e5568668755fa8c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;别名配置如图&quot; /&gt;
这样就好了，快在ZSH下使用你短命令吧&lt;/p&gt;

&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;附：简化git命令&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config --global alias.&amp;lt;handle&amp;gt; &amp;lt;command&amp;gt;

比如：git status 改成 git st，这样可以简化命令

git config --global alias.st status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 24 Aug 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/08/24/MAC%E4%B8%8B%E9%85%8D%E7%BD%AEZSH.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/08/24/MAC%E4%B8%8B%E9%85%8D%E7%BD%AEZSH.html</guid>
        
        <category>ZSH</category>
        
        
        <category>ZSH</category>
        
      </item>
    
      <item>
        <title>数组元素和数组名作为函数参数</title>
        <description>&lt;h3 id=&quot;数组用作函数参数有两种形式&quot;&gt;数组用作函数参数有两种形式：&lt;/h3&gt;
&lt;p&gt;一种是把数组元素（下标变量）作为实参使用；&lt;/p&gt;

&lt;p&gt;一种是把数组名作为函数的形参和实参使用。&lt;/p&gt;

&lt;h4 id=&quot;1数组元素下标变量作为实参使用&quot;&gt;1、数组元素（下标变量）作为实参使用&lt;/h4&gt;
&lt;p&gt;数组元素作为函数实参使用与普通变量是完全相同的，在发生函数调用时，把作为实参的数组元素的值传给形参，只是“拷贝”实参中的变量的值，传送给形参，实现单向的值传送
&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1712780-7604f5a89a0389f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;1712780-0c3e72461b50aec2.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2数组名作为函数参数&quot;&gt;2、数组名作为函数参数&lt;/h4&gt;
&lt;p&gt;用数组名作为函数参数与用数组元素作实参有几点不同&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;用数组元素作函数参数不要求形参也必须是数组，但是用数组名作函数参数时，则要求形参和相对应的实参都是类型相同的数组&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在C语言中，数组名除作为变量的标识符之外，数组名还代表了该数组在内存中的起始地址，当数组名作函数参数时，实参与形参之间不是“值传递”，而是“地址传递”，实参数组名将该数组的其实地址传给形参数组，两个数组共享一段内存单元，编译系统不再为形参数组分配存储单元。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在变量做函数参数时，所进行的值传递是单向的。即只能从实参传向形参，不能从形参传回实参。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3数组名作为函数参数注意事项&quot;&gt;3、数组名作为函数参数注意事项&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;形参数组和实参数组类型必须一致，否则出错&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在函数形参表中，允许不给出形参数组的长度，或用一个变量来表示数组元素的个数&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void xzh(int a[])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;或写为&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void xzh(int a[],int n)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;n的值由主调函数的实参进行传递&lt;/p&gt;

&lt;p&gt;&lt;del&gt;所有的地址都占8个字节&lt;/del&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;形参数组和实参数组长度可以不相同，因为在调用时，只传递首地址而不检查形参数组的长度。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 09 Mar 2016 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2016/03/09/%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E5%92%8C%E6%95%B0%E7%BB%84%E5%90%8D%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/03/09/%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E5%92%8C%E6%95%B0%E7%BB%84%E5%90%8D%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0.html</guid>
        
        <category>C语言</category>
        
        
        <category>C语言</category>
        
      </item>
    
  </channel>
</rss>
